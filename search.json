[{"path":"https://aravind-j.github.io/dormancymetrics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"J. Aravind. Author, maintainer. D. Vijay. Author. C. T. Manjunath Prasad. Author. Suman Roy. Author. ICAR-NBGPR. Copyright holder.           www.nbpgr.org.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aravind J, Vijay D, Manjunath Prasad C, Roy S (2025). dormancymetrics: Curve Fitting Seed Dormancy Release. R package version 0.0.0.9000, https://github.com/aravind-j/dormancymetrics.","code":"@Manual{,   title = {dormancymetrics: Curve Fitting for Seed Dormancy Release},   author = {J. Aravind and D. Vijay and C. T. {Manjunath Prasad} and Suman Roy},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/aravind-j/dormancymetrics}, }"},{"path":[]},{"path":[]},{"path":"https://aravind-j.github.io/dormancymetrics/index.html","id":"aravind-j1-viay-d2-manjunath-prasad-c-t2-and-suman-roy1","dir":"","previous_headings":"dormancymetrics: Curve Fitting for Seed Dormancy Release","what":"Aravind, J1, Viay, D2, Manjunath Prasad, C. T.2 and Suman Roy1","title":"Curve Fitting for Seed Dormancy Release","text":"Division Germplasm Conservation, ICAR-National Bureau Plant Genetic Resources, New Delhi. Division Seed Science Technology, ICAR-Indian Agricultural Research Institute, New Delhi.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Curve Fitting for Seed Dormancy Release","text":"Provides functions fit non-linear regression curves aslogistic (Bentsink et al. 2010 <doi:10.1073/pnas.1000410107> 2011<doi:bentsink_identification_2011>, Postma et al. 2015<doi:10.1111/mec.13061>) log-logistic models (Fogliatto et al. 2020<doi:10.1080/11263504.2019.1578282>) germination count data recorded atsequential time intervals seed storage. Facilitates estimation keyparameters days seed dry storage required reach 50%germination rate dormancy release.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Curve Fitting for Seed Dormancy Release","text":"development version can installed github follows:","code":"# Install development version from Github devtools::install_github(\"aravind-j/dormancymetrics\")"},{"path":"https://aravind-j.github.io/dormancymetrics/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s new","title":"Curve Fitting for Seed Dormancy Release","text":"know whats new version type:","code":"news(package='dormancymetrics')"},{"path":"https://aravind-j.github.io/dormancymetrics/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Curve Fitting for Seed Dormancy Release","text":"Github page Documentation website","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/index.html","id":"citing-dormancymetrics","dir":"","previous_headings":"","what":"Citing dormancymetrics","title":"Curve Fitting for Seed Dormancy Release","text":"cite methods package use:","code":"citation(\"dormancymetrics\") To cite package 'dormancymetrics' in publications use:    Aravind J, Vijay D, Manjunath Prasad C, Roy S (2025).   _dormancymetrics: Curve Fitting for Seed Dormancy Release_. R package   version 0.0.0.9000, <https://github.com/aravind-j/dormancymetrics>.  A BibTeX entry for LaTeX users is    @Manual{,     title = {dormancymetrics: Curve Fitting for Seed Dormancy Release},     author = {J. Aravind and D. Vijay and C. T. {Manjunath Prasad} and Suman Roy},     year = {2025},     note = {R package version 0.0.0.9000},     url = {https://github.com/aravind-j/dormancymetrics},   }"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL1.html","id":null,"dir":"Reference","previous_headings":"","what":"Four parameter logistic (with explicit inflection point) — FourPL1","title":"Four parameter logistic (with explicit inflection point) — FourPL1","text":"used FourPLfit.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four parameter logistic (with explicit inflection point) — FourPL1","text":"","code":"FourPL1(x, a, bta, c, y0)  FourPL1_fixa(x, a = 100, bta, c, y0)  FourPL1_fixy0(x, a, bta, c)  FourPL1_fixa_fixy0(x, a = 100, bta, c)  FourPL1_deriv(x, y0, a, b, c)"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Four parameter logistic (with explicit inflection point) — FourPL1","text":"x explanatory/independent variable value. Parameter \\(\\). bta Parameter \\(\\beta\\) \\(b = e^{\\beta}\\). c Parameter \\(c\\). y0 Parameter \\(y_{0}\\). b Parameter \\(b\\).","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Four parameter logistic (with explicit inflection point) — FourPL1","text":"calculated response/dependent value value.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL2.html","id":null,"dir":"Reference","previous_headings":"","what":"Four paramter logistic (with implicit inflection point) — FourPL2","title":"Four paramter logistic (with implicit inflection point) — FourPL2","text":"used FourPLfit.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four paramter logistic (with implicit inflection point) — FourPL2","text":"","code":"FourPL2(x, a, bta, k, y0)  FourPL2_fixa(x, a = 100, bta, k, y0)  FourPL2_fixy0(x, a, bta, k)  FourPL2_fixa_fixy0(x, a = 100, bta, k)  FourPL2_deriv(x, y0, a, b, k)"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Four paramter logistic (with implicit inflection point) — FourPL2","text":"x explanatory/independent variable value. Parameter \\(\\). bta Parameter \\(\\beta\\) \\(b = e^{\\beta}\\). k Parameter \\(k\\). y0 Parameter \\(y_{0}\\). b Parameter \\(b\\).","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Four paramter logistic (with implicit inflection point) — FourPL2","text":"calculated response/dependent value value.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL1.html","id":null,"dir":"Reference","previous_headings":"","what":"Four parameter log-logistic (with explicit inflection point) — FourPLL1","title":"Four parameter log-logistic (with explicit inflection point) — FourPLL1","text":"used FourPLfit.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four parameter log-logistic (with explicit inflection point) — FourPLL1","text":"","code":"FourPLL1(x, a, bta, c, y0)  FourPLL1_fixa(x, a = 100, bta, c, y0)  FourPLL1_fixy0(x, a, bta, c)  FourPLL1_fixa_fixy0(x, a = 100, bta, c)  FourPLL1_deriv(x, y0, a, b, c)"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Four parameter log-logistic (with explicit inflection point) — FourPLL1","text":"x explanatory/independent variable value. Parameter \\(\\). bta Parameter \\(\\beta\\) \\(b = e^{\\beta}\\). c Parameter \\(c\\). y0 Parameter \\(y_{0}\\). b Parameter \\(b\\).","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Four parameter log-logistic (with explicit inflection point) — FourPLL1","text":"calculated response/dependent value value.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL2.html","id":null,"dir":"Reference","previous_headings":"","what":"Four paramter log-logistic (with implicit inflection point) — FourPLL2","title":"Four paramter log-logistic (with implicit inflection point) — FourPLL2","text":"used FourPLfit.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Four paramter log-logistic (with implicit inflection point) — FourPLL2","text":"","code":"FourPLL2(x, a, bta, k, y0)  FourPLL2_fixa(x, a = 100, bta, k, y0)  FourPLL2_fixy0(x, a, bta, k)  FourPLL2_fixa_fixy0(x, a = 100, bta, k)  FourPLL2_deriv(x, y0, a, b, k)"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Four paramter log-logistic (with implicit inflection point) — FourPLL2","text":"x explanatory/independent variable value. Parameter \\(\\). bta Parameter \\(\\beta\\) \\(b = e^{\\beta}\\). k Parameter \\(k\\). y0 Parameter \\(y_{0}\\). b Parameter \\(b\\).","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLL2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Four paramter log-logistic (with implicit inflection point) — FourPLL2","text":"calculated response/dependent value value.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL_withWE.html","id":null,"dir":"Reference","previous_headings":"","what":"Function/model selection helper with trycatch — FourPL_withWE","title":"Function/model selection helper with trycatch — FourPL_withWE","text":"exported. Strictly internal","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL_withWE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function/model selection helper with trycatch — FourPL_withWE","text":"","code":"FourPL_withWE(   data,   fix.a,   fix.y0,   starta,   startbta,   startc,   startk,   starty0,   maxiter,   algorithm = \"lm\",   warnOnly = FALSE,   inflection.point = c(\"explicit\", \"implicit\"),   time.scale = c(\"linear\", \"log\") )"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPL_withWE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function/model selection helper with trycatch — FourPL_withWE","text":"fix.Fix actual maximum germination percentage end experiment. fix.y0 Force intercept y axis 0. inflection.point Either \"explicit\" \"implicit\". See Details. time.scale Either \"linear\" fitting four-parameter logistic function \"logarithmic\" fitting four-parameter log-logistic function.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit four-parameter logistic or log-logistic function — FourPLfit","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"Fit four-parameter logistic log-logistic function (Bentsink et al. 2010; Bentsink Koornneef 2011; Postma Agren 2015; Fogliatto et al. 2020)  germination count data recorded sequential time intervals seed storage model dormancy release curve compute associated parameters.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"","code":"FourPLfit(   germ.counts,   intervals,   rep,   total.seeds,   fix.y0 = TRUE,   fix.a = TRUE,   inflection.point = c(\"explicit\", \"implicit\"),   time.scale = c(\"linear\", \"log\"),   tmax = max(intervals),   tries = 3 )"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"germ.counts Germination counts time interval (days seed storage) numeric vector. intervals Time intervals seed storage numeric vector. rep Optional. integer vector indicating replication corresponding germination count. total.seeds Total number seeds integer vector unit length. fix.y0 Force intercept y axis 0. fix.Fix actual maximum germination percentage end experiment. inflection.point Either \"explicit\" \"implicit\". See Details. time.scale Either \"linear\" fitting four-parameter logistic function \"logarithmic\" fitting four-parameter log-logistic function. tmax time interval AUC computed. tries number tries attempted fit curve. Default 3.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"list following components: data data frame   data used computing model. Parameters data frame   parameter estimates, standard errors p value. Fit one-row   data frame estimates model fitness log likelyhoods, Akaike   Information Criterion, Bayesian Information Criterion, deviance   residual degrees freedom. upper asymptote, maximum   germination percentage. b mathematical parameter controlling   shape steepness dormancy release curve. c   inflection point represents time point storage maximum   rate dormancy release. y0 lower asymptote, intercept   y axis. TMRDR Time maximum rate dormancy release. AUC estimate area curve. msg message   gsl_nls. isConv Logical value   indicating whether convergence achieved. model raw fitted   model output list class gsl_nls.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"germination count data seed lot recorded sequential time intervals storage can modelled fit four-parameter logistic function defined follows (Bentsink et al. 2010; Bentsink Koornneef 2011) . \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + e^{-b(x - c)}}\\] , \\(y\\) germination percentage \\(x\\) time interval storage, \\(y_{0}\\) lower asymptote, intercept y axis, \\(\\) upper asymptote, maximum germination percentage, \\(b\\) mathematical parameter controlling shape steepness dormancy release curve (larger \\(b\\) parameter, steeper rise toward asymptote \\(\\), shorter time initial germination value maximum germination), \\(c\\) inflection point represents time point storage maximum rate dormancy release. \\(c\\) \\(DSDS_{50}\\) (days seed dry storage required reach 50% germination). also described depth dormancy \\(AR_{50}\\) (dry -ripening time required achieve 50% germination). model inflection point \\(c\\) explicitly included. Alternatively data can also modelled fit four-parameter logistic function implicit inflection point (Postma Agren 2015)  defined follows. \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + k \\cdot e^{-b \\cdot x}}\\] , \\(k\\) controls initial value function \\(x = 0\\). determines initial steepness starting value curve. asymmetry horizontal shift factor affects curve reaches inflection point introduces asymmetry. \\[k = e^{-bc} \\; \\textrm{} \\; c = -\\frac{\\ln{k}}{b}\\] useful cases 50% germination achieved first time interval . model suitable dormancy release linear time scale smooth symmetrical. cases rapid early dormancy release long tail curve, log-logistic model appropriate (Fogliatto et al. 2020) . time \\(x\\) scaled logarithmically. \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + e^{-b(\\log(x) - \\log(c))}}\\] \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + k \\cdot x^{b}} \\; \\left (\\textrm{} \\; e^{b \\cdot \\log(x)} = x^{b}  \\right )\\] FourPLfit, models reparameterized substituting \\(b\\) \\(e^{\\beta}\\) constraint \\(b\\) positive values . \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + e^{-e^{\\beta}(x - c)}}\\] \\[y(x) = y_0 + \\frac{- y_{0}}{1 + k \\cdot e^{-e^{\\beta} \\cdot x}}\\] \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + e^{-e^{\\beta}(\\log(x) - \\log(c))}}\\] \\[y(x) =  y_{0} + \\frac{- y_{0}}{1 + k \\cdot x^{e^{\\beta}}}\\]","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"Bentsink L, Hanson J, Hanhart CJ, Blankestijn-de Vries H, Coltrane C, Keizer P, El-Lithy M, Alonso-Blanco C, de Andres MT, Reymond M, van Eeuwijk F, Smeekens S, Koornneef M (2010). “Natural variation seed dormancy Arabidopsis regulated additive genetic molecular pathways.” Proceedings National Academy Sciences, 107(9), 4264–4269. Bentsink L, Koornneef M (2011). “Identification characterization quantitative trait loci control seed dormancy Arabidopsis.” Seed Dormancy: Methods Protocols, 165–184. Springer. ISBN 1-61779-230-6. Fogliatto S, Milan M, De Palo F, Vidotto F (2020). “effect various -ripening temperature regimens germination behaviour Ambrosia artemisiifolia.” Plant Biosystems - International Journal Dealing Aspects Plant Biology, 154(2), 165–172. Postma FM, Agren J (2015). “Maternal environment affects genetic basis seed dormancy Arabidopsis thaliana.” Molecular Ecology, 24(4), 785–797.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/FourPLfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit four-parameter logistic or log-logistic function — FourPLfit","text":"","code":"x <- c(2, 1, 2, 2, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 6, 8, 10, 8, 19,        8, 4, 11, 4, 22, 19, 25, 16, 21, 30, 40, 33, 34, 36, 44, 42,        42, 39, 42, 38, 47, 42, 50, 44, 48, 50) y <- c(0, 0, 14, 14, 18, 18, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23,        24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26,        26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27) rep <- rep(1:2, 23) int <- rep(c(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 31, 35, 39, 43, 47, 52,              57, 62, 67, 72, 82, 92, 102), each = 2) total.seeds = 50  # Logistic fit #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FourPLfit(germ.counts = x, intervals = int, rep = rep, total.seeds = 50,           fix.y0 = TRUE, fix.a = TRUE,           inflection.point = \"explicit\", time.scale = \"linear\") #> Warning: 'intervals' are not uniform. #> $data #>     gp rep intervals #> 1    4   1         0 #> 2    2   2         0 #> 3    4   1         3 #> 4    4   2         3 #> 5    0   1         6 #> 6    0   2         6 #> 7    4   1         9 #> 8    4   2         9 #> 9    0   1        12 #> 10   4   2        12 #> 11   4   1        15 #> 12   0   2        15 #> 13   4   1        18 #> 14   4   2        18 #> 15   4   1        21 #> 16  12   2        21 #> 17  16   1        24 #> 18  20   2        24 #> 19  16   1        27 #> 20  38   2        27 #> 21  16   1        31 #> 22   8   2        31 #> 23  22   1        35 #> 24   8   2        35 #> 25  44   1        39 #> 26  38   2        39 #> 27  50   1        43 #> 28  32   2        43 #> 29  42   1        47 #> 30  60   2        47 #> 31  80   1        52 #> 32  66   2        52 #> 33  68   1        57 #> 34  72   2        57 #> 35  88   1        62 #> 36  84   2        62 #> 37  84   1        67 #> 38  78   2        67 #> 39  84   1        72 #> 40  76   2        72 #> 41  94   1        82 #> 42  84   2        82 #> 43 100   1        92 #> 44  88   2        92 #> 45  96   1       102 #> 46 100   2       102 #>  #> $Parameters #>   term  estimate  std.error statistic      p.value #> 1  bta -2.442148 0.07540735 -32.38607 2.476477e-32 #> 2    c 46.407609 0.98287455  47.21621 2.460477e-39 #>  #> $Fit #>      sigma isConv        finTol    logLik      AIC      BIC deviance #> 1 7.903799   TRUE -1.364242e-12 -159.3466 324.6932 330.1791 2748.681 #>   df.residual nobs #> 1          44   46 #>  #> $a #> [1] 100 #>  #> $b #> [1] 0.08697383 #>  #> $c #> [1] 46.40761 #>  #> $k #> [1] NA #>  #> $y0 #> [1] 0 #>  #> $TMRDR #> [1] 46.40762 #>  #> $AUC #> [1] 5548.207 #>  #> $msg #> [1] \"#1. success \" #>  #> $isConv #> [1] TRUE #>  #> $model #> Nonlinear regression model #>   model: gp ~ FourPL1_fixa_fixy0(x = intervals, a = max(gp), bta, c) #>    data: data #>    bta      c  #> -2.442 46.408  #>  residual sum-of-squares: 2749 #>  #> Algorithm: multifit/levenberg-marquardt, (scaling: levenberg, solver: qr) #>  #> Number of iterations to convergence: 9  #> Achieved convergence tolerance: -1.364e-12 #>  #> attr(,\"class\") #> [1] \"FourPLfit\" \"list\"      #> attr(,\"inflection.point\") #> [1] \"explicit\" #> attr(,\"time.scale\") #> [1] \"linear\"  FourPLfit(germ.counts = x, intervals = int, rep = rep, total.seeds = 50,           fix.y0 = TRUE, fix.a = TRUE,           inflection.point = \"implicit\", time.scale = \"linear\") #> Warning: 'intervals' are not uniform. #> $data #>     gp rep intervals #> 1    4   1         0 #> 2    2   2         0 #> 3    4   1         3 #> 4    4   2         3 #> 5    0   1         6 #> 6    0   2         6 #> 7    4   1         9 #> 8    4   2         9 #> 9    0   1        12 #> 10   4   2        12 #> 11   4   1        15 #> 12   0   2        15 #> 13   4   1        18 #> 14   4   2        18 #> 15   4   1        21 #> 16  12   2        21 #> 17  16   1        24 #> 18  20   2        24 #> 19  16   1        27 #> 20  38   2        27 #> 21  16   1        31 #> 22   8   2        31 #> 23  22   1        35 #> 24   8   2        35 #> 25  44   1        39 #> 26  38   2        39 #> 27  50   1        43 #> 28  32   2        43 #> 29  42   1        47 #> 30  60   2        47 #> 31  80   1        52 #> 32  66   2        52 #> 33  68   1        57 #> 34  72   2        57 #> 35  88   1        62 #> 36  84   2        62 #> 37  84   1        67 #> 38  78   2        67 #> 39  84   1        72 #> 40  76   2        72 #> 41  94   1        82 #> 42  84   2        82 #> 43 100   1        92 #> 44  88   2        92 #> 45  96   1       102 #> 46 100   2       102 #>  #> $Parameters #>   term  estimate   std.error  statistic      p.value #> 1  bta -2.442148  0.07540736 -32.386069 2.476488e-32 #> 2    k 56.613503 17.15193111   3.300707 1.918389e-03 #>  #> $Fit #>      sigma isConv finTol    logLik      AIC      BIC deviance df.residual nobs #> 1 7.903799   TRUE      0 -159.3466 324.6932 330.1791 2748.681          44   46 #>  #> $a #> [1] 100 #>  #> $b #> [1] 0.08697383 #>  #> $c #> [1] NA #>  #> $k #> [1] 56.6135 #>  #> $y0 #> [1] 0 #>  #> $TMRDR #> [1] 46.40762 #>  #> $AUC #> [1] 5548.207 #>  #> $msg #> [1] \"#1. success \" #>  #> $isConv #> [1] TRUE #>  #> $model #> Nonlinear regression model #>   model: gp ~ FourPL2_fixa_fixy0(x = intervals, a = max(gp), bta, k) #>    data: data #>    bta      k  #> -2.442 56.614  #>  residual sum-of-squares: 2749 #>  #> Algorithm: multifit/levenberg-marquardt, (scaling: levenberg, solver: qr) #>  #> Number of iterations to convergence: 34  #> Achieved convergence tolerance: 0 #>  #> attr(,\"class\") #> [1] \"FourPLfit\" \"list\"      #> attr(,\"inflection.point\") #> [1] \"implicit\" #> attr(,\"time.scale\") #> [1] \"linear\"  # Log-logistic fit #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FourPLfit(germ.counts = y, intervals = int, rep = rep, total.seeds = 50,           fix.y0 = TRUE, fix.a = TRUE,           inflection.point = \"explicit\", time.scale = \"log\") #> Warning: 'intervals' are not uniform. #> $data #>    gp rep intervals #> 1   0   1         0 #> 2   0   2         0 #> 3  28   1         3 #> 4  28   2         3 #> 5  36   1         6 #> 6  36   2         6 #> 7  40   1         9 #> 8  40   2         9 #> 9  42   1        12 #> 10 42   2        12 #> 11 44   1        15 #> 12 44   2        15 #> 13 46   1        18 #> 14 46   2        18 #> 15 46   1        21 #> 16 46   2        21 #> 17 48   1        24 #> 18 48   2        24 #> 19 48   1        27 #> 20 48   2        27 #> 21 50   1        31 #> 22 50   2        31 #> 23 50   1        35 #> 24 50   2        35 #> 25 50   1        39 #> 26 50   2        39 #> 27 50   1        43 #> 28 50   2        43 #> 29 52   1        47 #> 30 52   2        47 #> 31 52   1        52 #> 32 52   2        52 #> 33 52   1        57 #> 34 52   2        57 #> 35 52   1        62 #> 36 52   2        62 #> 37 54   1        67 #> 38 54   2        67 #> 39 54   1        72 #> 40 54   2        72 #> 41 54   1        82 #> 42 54   2        82 #> 43 54   1        92 #> 44 54   2        92 #> 45 54   1       102 #> 46 54   2       102 #>  #> $Parameters #>   term   estimate  std.error statistic      p.value #> 1  bta 0.03454927 0.03104338  1.112935 2.717797e-01 #> 2    c 3.09505151 0.13815722 22.402387 1.084478e-25 #>  #> $Fit #>      sigma isConv finTol    logLik      AIC     BIC deviance df.residual nobs #> 1 1.123308   TRUE      0 -69.59755 145.1951 150.681 55.52009          44   46 #>  #> $a #> [1] 54 #>  #> $b #> [1] 1.035153 #>  #> $c #> [1] 3.095052 #>  #> $k #> [1] NA #>  #> $y0 #> [1] 0 #>  #> $TMRDR #> [1] 3.09504 #>  #> $AUC #> [1] 4945.616 #>  #> $msg #> [1] \"#1. success \" #>  #> $isConv #> [1] TRUE #>  #> $model #> Nonlinear regression model #>   model: gp ~ FourPLL1_fixa_fixy0(x = intervals, a = max(gp), bta, c) #>    data: data #>     bta       c  #> 0.03455 3.09505  #>  residual sum-of-squares: 55.52 #>  #> Algorithm: multifit/levenberg-marquardt, (scaling: levenberg, solver: qr) #>  #> Number of iterations to convergence: 13  #> Achieved convergence tolerance: 0 #>  #> attr(,\"class\") #> [1] \"FourPLfit\" \"list\"      #> attr(,\"inflection.point\") #> [1] \"explicit\" #> attr(,\"time.scale\") #> [1] \"log\"  FourPLfit(germ.counts = y, intervals = int, rep = rep, total.seeds = 50,           fix.y0 = TRUE, fix.a = TRUE,           inflection.point = \"implicit\", time.scale = \"log\") #> Warning: 'intervals' are not uniform. #> $data #>    gp rep intervals #> 1   0   1         0 #> 2   0   2         0 #> 3  28   1         3 #> 4  28   2         3 #> 5  36   1         6 #> 6  36   2         6 #> 7  40   1         9 #> 8  40   2         9 #> 9  42   1        12 #> 10 42   2        12 #> 11 44   1        15 #> 12 44   2        15 #> 13 46   1        18 #> 14 46   2        18 #> 15 46   1        21 #> 16 46   2        21 #> 17 48   1        24 #> 18 48   2        24 #> 19 48   1        27 #> 20 48   2        27 #> 21 50   1        31 #> 22 50   2        31 #> 23 50   1        35 #> 24 50   2        35 #> 25 50   1        39 #> 26 50   2        39 #> 27 50   1        43 #> 28 50   2        43 #> 29 52   1        47 #> 30 52   2        47 #> 31 52   1        52 #> 32 52   2        52 #> 33 52   1        57 #> 34 52   2        57 #> 35 52   1        62 #> 36 52   2        62 #> 37 54   1        67 #> 38 54   2        67 #> 39 54   1        72 #> 40 54   2        72 #> 41 54   1        82 #> 42 54   2        82 #> 43 54   1        92 #> 44 54   2        92 #> 45 54   1       102 #> 46 54   2       102 #>  #> $Parameters #>   term   estimate  std.error statistic      p.value #> 1  bta 0.03454925 0.03104335  1.112936 2.717795e-01 #> 2    k 3.22044824 0.25133887 12.813172 1.893352e-16 #>  #> $Fit #>      sigma isConv       finTol    logLik      AIC     BIC deviance df.residual #> 1 1.123308   TRUE 2.131628e-14 -69.59755 145.1951 150.681 55.52009          44 #>   nobs #> 1   46 #>  #> $a #> [1] 54 #>  #> $b #> [1] 1.035153 #>  #> $c #> [1] NA #>  #> $k #> [1] 3.220448 #>  #> $y0 #> [1] 0 #>  #> $TMRDR #> [1] 3.09504 #>  #> $AUC #> [1] 4945.616 #>  #> $msg #> [1] \"#1. success \" #>  #> $isConv #> [1] TRUE #>  #> $model #> Nonlinear regression model #>   model: gp ~ FourPLL2_fixa_fixy0(x = intervals, a = max(gp), bta, k) #>    data: data #>     bta       k  #> 0.03455 3.22045  #>  residual sum-of-squares: 55.52 #>  #> Algorithm: multifit/levenberg-marquardt, (scaling: levenberg, solver: qr) #>  #> Number of iterations to convergence: 18  #> Achieved convergence tolerance: 2.132e-14 #>  #> attr(,\"class\") #> [1] \"FourPLfit\" \"list\"      #> attr(,\"inflection.point\") #> [1] \"implicit\" #> attr(,\"time.scale\") #> [1] \"log\""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/plot.FourPLfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the four-parameter logistic or log-logistic function fitted to germination count data from a FourPLfit object — plot.FourPLfit","title":"Plot the four-parameter logistic or log-logistic function fitted to germination count data from a FourPLfit object — plot.FourPLfit","text":"Plot four-parameter logistic log-logistic function fitted germination count data FourPLfit object","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/plot.FourPLfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the four-parameter logistic or log-logistic function fitted to germination count data from a FourPLfit object — plot.FourPLfit","text":"","code":"# S3 method for class 'FourPLfit' plot(   x,   rdr = TRUE,   DSDS50 = TRUE,   limits = TRUE,   plotlabels = TRUE,   x.axis.scale = c(\"linear\", \"log\"),   ... )"},{"path":"https://aravind-j.github.io/dormancymetrics/reference/plot.FourPLfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the four-parameter logistic or log-logistic function fitted to germination count data from a FourPLfit object — plot.FourPLfit","text":"x object class FourPLfit obtained output FourPLfit function. rdr TRUE, plots Rate Dormancy Release curve (RDR). Default TRUE. DSDS50 TRUE, highlights days seed dry storage required reach 50% germination. Default TRUE. limits logical. TRUE, set limits y axis (germination percentage) 0 100 germination curve plot. FALSE, limits set according data. Default TRUE. plotlabels logical. TRUE, adds labels germination curve plot. Default TRUE. x.axis.scale x axis scale log-logistic fits. Either \"linear\" \"log\". ... Default plot arguments.","code":""},{"path":"https://aravind-j.github.io/dormancymetrics/reference/plot.FourPLfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the four-parameter logistic or log-logistic function fitted to germination count data from a FourPLfit object — plot.FourPLfit","text":"plot dormancy release curve object class   ggplot.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/dormancymetrics/reference/plot.FourPLfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the four-parameter logistic or log-logistic function fitted to germination count data from a FourPLfit object — plot.FourPLfit","text":"","code":"x <- c(2, 1, 2, 2, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 6, 8, 10, 8, 19,        8, 4, 11, 4, 22, 19, 25, 16, 21, 30, 40, 33, 34, 36, 44, 42,        42, 39, 42, 38, 47, 42, 50, 44, 48, 50) y <- c(0, 0, 14, 14, 18, 18, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23,        24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26,        26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27) rep <- rep(1:2, 23) int <- rep(c(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 31, 35, 39, 43, 47, 52,              57, 62, 67, 72, 82, 92, 102), each = 2) total.seeds = 50  # Logistic fit #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ fitL1 <- FourPLfit(germ.counts = x, intervals = int, rep = rep,                    total.seeds = 50, fix.y0 = TRUE, fix.a = TRUE,                    inflection.point = \"explicit\", time.scale = \"linear\") #> Warning: 'intervals' are not uniform.  fitL2 <- FourPLfit(germ.counts = x, intervals = int, rep = rep,                    total.seeds = 50, fix.y0 = TRUE, fix.a = TRUE,                    inflection.point = \"implicit\", time.scale = \"linear\") #> Warning: 'intervals' are not uniform.  plot(fitL1)  plot(fitL2)   # Log-logistic fit #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ fitLL1 <- FourPLfit(germ.counts = y, intervals = int, rep = rep,                     total.seeds = 50, fix.y0 = TRUE, fix.a = TRUE,                     inflection.point = \"explicit\", time.scale = \"log\") #> Warning: 'intervals' are not uniform.  fitLL2 <- FourPLfit(germ.counts = y, intervals = int, rep = rep,                     total.seeds = 50, fix.y0 = TRUE, fix.a = TRUE,                     inflection.point = \"implicit\", time.scale = \"log\") #> Warning: 'intervals' are not uniform.  plot(fitLL1) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_function()`).  plot(fitLL1, x.axis.scale = \"log\") #> Warning: log-2.718282 transformation introduced infinite values. #> Warning: log-2.718282 transformation introduced infinite values. #> Warning: log-2.718282 transformation introduced infinite values.  plot(fitLL2) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_function()`).  plot(fitLL2, x.axis.scale = \"log\") #> Warning: log-2.718282 transformation introduced infinite values. #> Warning: log-2.718282 transformation introduced infinite values. #> Warning: log-2.718282 transformation introduced infinite values."}]
